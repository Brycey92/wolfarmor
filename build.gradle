import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "http://repo.spongepowered.org/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'groovy'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def modconfig = null
def apiconfig = null

file './config.json' withReader {
    modconfig = new JsonSlurper().parseText(it.text)
}

file './wolfarmor-api/config.json' withReader {
    apiconfig = new JsonSlurper().parseText(it.text)
}

def apiVersion = "${apiconfig.version.major}.${apiconfig.version.minor}.${apiconfig.version.patch}"
def shortVersion = "${modconfig.version.major}.${modconfig.version.minor}.${modconfig.version.patch}"

version = "${modconfig.minecraft.version}-${shortVersion}-${modconfig.version.extension}"
group = modconfig.group
archivesBaseName = modconfig.modid

println "Current version is ${version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: modconfig.mcp.channel, version: modconfig.mcp.version
}

dependencies {
    minecraft "net.minecraftforge:forge:${modconfig.minecraft.version}-${modconfig.forge.version}"
    compile("org.spongepowered:mixin:${modconfig.mixin.version}"){
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    compile project(":wolfarmor-api")
}

sourceSets.main {
    java {
        srcDirs 'src/main/java'
    }
    artifacts {
        archives shadowJar
    }
}

sourceSets.test {
    dependencies {
        testCompile 'org.codehaus.groovy:groovy-all:2.5.7'
        testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
        testCompile 'junit:junit:4.12'
        testRuntime 'org.objenesis:objenesis:2.6'
        testRuntime 'net.bytebuddy:byte-buddy:1.9.3'
    }
    java {
        srcDirs 'src/test/groovy'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest.attributes(
        'Built-By': System.properties['user.name'],
        'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",
        'Specification-Title': project.name,
        'Specification-Vendor': modconfig.vendor,
        'Specification-Version': version,
        'API-Version': apiVersion,
        'FMLCorePlugin': "${project.group}.coremod.WolfArmorCore",
        'ForceLoadAsMod': true,
        'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
        'TweakOrder': 0,
        'MixinConfigs': 'mixins.wolfarmor.core.json',
        'FMLAT': 'wolfarmor_at.cfg'
    )
}

build {
    finalizedBy 'incrementPatchVersion'
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    doFirst {
        // Replace tokens in files, output to generated source
        copy {
            from sourceSets.main.allJava
            into "$buildDir/generated/main/java"
            expand  modid: modconfig.modid,
                    modname: modconfig.name,
                    version: shortVersion,
                    mcversion: modconfig.minecraft.version
        }
        // Copy generated source to build source
        copy {
            from "$buildDir/generated/main/java"
            into "$buildDir/sources/main/java"
        }
        delete "$buildDir/generated"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", shortVersion
    inputs.property "mcversion", modconfig.version.minecraft

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':shortVersion, 'mcversion':modconfig.version.minecraft
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

	// copy LICENSE
    from('/') {
        include 'LICENSE'
        include 'CREDITS'
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")

shadowJar {
    mainSpec.sourcePaths.clear()
    dependencies {
        include dependency('org.spongepowered:mixin')
        include dependency(':wolfarmor-api')
    }

    manifest.attributes(
            'FMLCorePluginContainsFMLMod': true
    )

    exclude 'dummyThing'
    exclude 'LICENSES*'

    afterEvaluate {
        from reobfFile
    }
}

task saveConfig {
    doLast {
        def configFile = new File('./config.json')
        configFile.delete()
        configFile.write(new JsonBuilder(modconfig).toPrettyString())
    }
}

task reportVersionChange {
    doLast {
        println "Semantic version updated to ${modconfig.version.major}.${modconfig.version.minor}.${modconfig.version.patch}"
    }
}

task incrementPatchVersion {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modconfig.version.patch += 1
    }
}

task incrementMinorVersion {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modconfig.version.patch = 0
        modconfig.version.minor += 1
    }
}

task incrementMajor {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modconfig.version.patch = 0
        modconfig.version.minor = 0
        modconfig.version.major += 1
    }
}
