import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "http://repo.spongepowered.org/maven"}
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.spongepowered:mixingradle:0.6+"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id 'groovy'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

def modConfig = null
def apiConfig = null

file "./config.json" withReader {
    modConfig = new JsonSlurper().parseText(it.text)
}

file "./api/config.json" withReader {
    apiConfig = new JsonSlurper().parseText(it.text)
}

def apiVersion = "${apiConfig.version.major}.${apiConfig.version.minor}.${apiConfig.version.patch}"
def shortVersion = "${modConfig.version.major}.${modConfig.version.api}.${modConfig.version.minor}.${modConfig.version.patch}"

version = "${modConfig.version.minecraft}-${shortVersion}-${modConfig.version.extension}"
group= "dev.satyrn.wolfarmor"
archivesBaseName = "wolfarmor"

println "Current version is ${version}"

sourceCompatibility = targetCompatibility = "1.8"

repositories {
    maven { url = 'http://repo.spongepowered.org/maven' }
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/"}
}

dependencies {
    compile("org.spongepowered:mixin:${modConfig.sponge.version}"){
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
}

sourceSets.api {
    java {
        srcDirs 'api/'
    }
}

sourceSets.main {
    java {
        srcDirs 'src/main/java'
    }
    artifacts {
        archives shadowJar
    }
}

sourceSets.test {
    dependencies {
        testCompile "org.codehaus.groovy:groovy-all:2.5.7"
        testCompile "org.spockframework:spock-core:1.3-groovy-2.5"
        testCompile "junit:junit:4.12"
        testRuntime "org.objenesis:objenesis:2.6"
        testRuntime "net.bytebuddy:byte-buddy:1.9.3"
    }
    java {
        srcDirs 'src/test/groovy'
    }
}

build {
    dependsOn 'expandSource'
    finalizedBy 'incrementPatchVersion'
}

jar {
    from sourceSets.api.output
    from sourceSets.main.output
    manifest.attributes(
            'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.vm.version']} (${System.properties['java.vm.vendor']})",
            'Implementation-Title': project.name,
            'Implementation-Version': version,
            'Implementation-Vendor': 'https://satyrn.dev',
            'API-Version': apiVersion,
            'FMLCorePlugin': "${project.group}.coremod.WolfArmorCore",
            'ForceLoadAsMod': true,
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'MixinConfigs': 'mixins.wolfarmor.core.json',
            'FMLAT': 'wolfarmor_at.cfg'
    )
}

javadoc {
    source = sourceSets.api.allJava + sourceSets.main.allJava
}

compileJava {
    dependsOn 'expandSource'
    sourceCompatibility = targetCompatibility = "1.8"
}

shadowJar {
    mainSpec.sourcePaths.clear()
    dependsOn reobfJar
    dependencies {
        include dependency('org.spongepowered:mixin')
    }

    manifest.attributes(
        'FMLCorePluginContainsFMLMod': true
    )

    exclude 'dummyThing'
    exclude 'LICENSES*'

    afterEvaluate {
        from zipTree(reobfJar.jar)
    }
}

minecraft {
    version = "${modConfig.version.minecraft}-${modConfig.forge.version}"
    runDir = "run"
    mappings = modConfig.mcp.version

    replace '@NAME@', modConfig.name
    replace '@MODID@', modConfig.modid
    replace '@VERSION@', shortVersion
    replace '@MCVERSION@', modConfig.version.minecraft
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':shortVersion, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

	// copy LICENSE
    from('/') {
        include 'LICENSE'
        include 'CREDITS'
    }
}

sourceTestJava {

}

mixin {
    add sourceSets.main, "mixins.wolfarmor.refmap.json"
}

task saveConfig {
    doLast {
        def configFile = new File('./config.json')
        configFile.delete()
        configFile.write(new JsonBuilder(modConfig).toPrettyString())
    }
}

task reportVersionChange {
    doLast {
        println "Semantic version updated to ${modConfig.version.major}.${modConfig.version.api}.${modConfig.version.minor}.${modConfig.version.patch}"
    }
}

task incrementPatchVersion {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modConfig.version.patch += 1
    }
}

task incrementMinorVersion {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modConfig.version.patch = 0
        modConfig.version.minor += 1
    }
}

task incrementApi {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modConfig.version.patch = 0
        modConfig.version.minor = 0
        modConfig.version.api += 1
    }
}

task incrementMajor {
    finalizedBy 'saveConfig'
    finalizedBy 'reportVersionChange'
    doLast {
        modConfig.version.patch = 0
        modConfig.version.minor = 0
        modConfig.version.api = 0
        modConfig.version.major += 1
    }
}

task expandSource(type:Copy) {
    from sourceSets.main.allJava
    into 'build/sources/main/java'
    expand 'version': shortVersion, 'mcversion': project.minecraft.version
}
